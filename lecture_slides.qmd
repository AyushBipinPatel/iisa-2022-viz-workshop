---
title: "Data Visualization with R"
author: "Ayush Patel"
format: 
  revealjs:
    standalone: true
    slide-number: c/t
    width: 1400
    theme: [serif, theme.scss]
---

## Before we start

::::{.columns}

:::{.column width="70%"}

__Ensure that you have the system requirements mentioned on [this page](https://r-iisa2022.rbind.io/schedule/) under the 'Prepare for the workshop' section.__

:::

:::{.column width="30%"}

```{=html}
<figure>
<img src="https://images.metmuseum.org/CRDImages/aa/original/DT5334.jpg" alt="Warrior's armor(gusoku)" >
<figcaption style="font-size:10px;">Source: <a herf = "https://www.metmuseum.org/art/collection/search/24975?searchField=All&amp;sortBy=Relevance&amp;high=on&amp;ao=on&amp;showOnly=openAccess&amp;ft=start&amp;offset=0&amp;rpp=40&amp;pos=7">Armor (Gusoku)</a></figcaption>
</figure>
```

:::

::::

## Hello

::::{.columns}

:::{.column width="70%"}
I am [Ayush]{.fragment fragment-index="1" style="font-size:45px"}.


[Independent researcher working at the intersection of data, law, development and economics.]{.fragment fragment-index="2" style="font-size:25px"} 

[I am a [RStudio (Posit) certified tidyverse Instructor.](https://education.rstudio.com/trainers/people/patel+ayush/)]{.fragment fragment-index="3" style="font-size:25px"} 

[Researcher at [Oxford Poverty and Human development Initiative (OPHI)](https://ophi.org.uk/), at the University of Oxford.]{.fragment fragment-index="4" style="font-size:25px"} 
:::

:::{.column width="30%"}

__Reach me__

{{< fa solid envelope >}} [ayush.ap58@gmail.com]{style="font-size:25px"}

{{< fa brands twitter >}} [@ayushbipinpatel](https://twitter.com/ayushbipinpatel){style="font-size:25px}

:::

::::

## What will you learn? {.scrollable}

How to make static and interactive charts using R that look like this.

:::{.panel-tabset}

### Static Chart

```{r echo=FALSE, fig.align='center',fig.dim=c(14,7)}
ggplot2::mpg|>
  ggplot2::ggplot()+
  ggplot2::geom_jitter(ggplot2::aes(hwy,displ,colour = class),
                       size = 2.5,alpha = 0.8)+
  ggplot2::labs(
    title = "Relation between power and milage",
    x = "Miles per gallon on highway",
    y = "Engine Displacement (Litres)",
    caption = "mpg data from package ggplot2"
  )+
  ggplot2::scale_colour_manual(values = c("#181f86","#fad510","#972d14",
                                                   "#e09500","#5bbcd6",
                                                   "#00a08a","#046c9a"),
                               name = "Class")+
  ggplot2::theme_minimal() -> p

p
```


### Interactive Chart

```{r echo=FALSE, fig.align='center',fig.dim=c(10,6)}

ggplot2::mpg|>
  ggplot2::ggplot()+
  ggiraph::geom_jitter_interactive(ggplot2::aes(hwy,displ,colour = class,
                                                tooltip = paste(manufacturer,":", 
                                                                model,"\n",
                                                                "cylinder: ", cyl)),
                       size = 2.5,alpha = 0.8)+
  ggplot2::labs(
    title = "Relation between power and milage",
    x = "Miles per gallon on highway",
    y = "Engine Displacement (Litres)",
    caption = "mpg data from package ggplot2"
  )+
  ggplot2::scale_colour_manual(values = c("#181f86","#fad510","#972d14",
                                                   "#e09500","#5bbcd6",
                                                   "#00a08a","#046c9a"),
                               name = "Class")+
  ggplot2::theme_minimal() -> p1

ggiraph::girafe(ggobj = p1,width_svg = 8,height_svg = 4)

```


:::

## Load these libraries


<br>


```{r eval=TRUE,echo=TRUE,results='hide'}
library(tidyverse)
library(scales)
library(gapminder)
library(ggiraph)
```

## The datasets {.scrollable}

:::{.panel-tabset}

### Gapminder

```{r about_gapminder, echo=FALSE}
gapminder::gapminder|>
  gt::gt()
  
```


### msleep

```{r about_msleep, echo=FALSE}
ggplot2::msleep|>
  gt::gt()
  
```

:::

## Components of a ggplot - canvas {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
#| fig-width: 8
#| fig-height: 6
#| code-line-numbers: "2"

# Data to use for creating plots
ggplot(data = msleep) 

```

## Components of a ggplot - link vars to aesthetics {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
#| fig-width: 8
#| fig-height: 6
#| code-line-numbers: "4,5,6"

# Data to use for creating plots
ggplot(data = msleep, 
    # link variables in data to axes
       aes(x = bodywt, 
           y = sleep_total) 
       ) 

```

## Components of a ggplot - Choose geometry {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
#| fig-width: 8
#| fig-height: 6
#| code-line-numbers: "6,8"

# Data to use for creating plots
ggplot(data = msleep, 
    # link variables in data to axes
       aes(x = bodywt, 
           y = sleep_total) 
       )+ # plus sign'+' adds a layer
    # A geometry or type of chart to plot
  geom_point() 


```

## Components of a ggplot - the details {auto-animate=true}

```{r}
#| echo: true
#| output-location: column
#| fig-width: 8
#| fig-height: 6
#| code-line-numbers: "9-18"

# Data to use for creating plots
ggplot(data = msleep, 
    # link variables in data to axes
       aes(x = bodywt, 
           y = sleep_total) 
       )+ # plus sign'+' adds a layer
    # A geometry or type of chart to plot
  geom_point() + # A '+' sign for every layer
  # add or edit various labels with this function
  labs( 
    # title for plot 
    title = "Are body weight and sleep time related?", 
    # x axis title
    x = "Body weight (Kg)", 
    # y axis title,
    y = "Total sleep time (hours)" 
  )+
  theme_minimal() # cosmetics


```

## Summary - commponents of a ggplot {auto-animate=true}

Create a blank canvas by using `ggplot()`

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1"

ggplot(data = df) # df is any data frame 
```

## Summary - commponents of a ggplot {auto-animate=true}

Link variables (columns) from df to plot aesthetics using `aes()`

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2-5"

ggplot(data = df, # df is any data frame 
       aes(
         x = var1, # var1 is name of a column in df
         y = var2  # var1 is name of a column in df
         )
       ) 
```

## Summary - commponents of a ggplot {auto-animate=true}

Choose a geometry using `geom_*()`

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "7"

ggplot(data = df, # df is any data frame 
       aes(
         x = var1, # var1 is name of a column in df
         y = var2  # var1 is name of a column in df
         )
       ) +
  geom_point() # geom layer, there are many geoms to chhoose from
```

## Summary - commponents of a ggplot {auto-animate=true}

Add label details and cosmetics

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "8-15"

ggplot(data = df, # df is any data frame 
       aes(
         x = var1, # var1 is name of a column in df
         y = var2  # var1 is name of a column in df
         )
       ) +
  geom_point() +# geom layer, there are many geoms to choose from
  labs(
    title = "Plot title",
    subtitle = "Plot Sub-title",
    x = "x-axis title",
    y = "y-axis title",
    caption = "plot caption"
  )+
  theme_bw() # there are many themes to choose from, you can make your own as well
```

## A quick coding exercise {{< fa solid laptop-code >}}

Write a code to create a plot with following details:

  1. Use the `msleep` data. (execute `?msleep` to see details of the data set)
  2. A plot between variables `vore` and `sleep_total`
  3. Link `vore` to x-axis and `sleep_total` to y-axis
  4. Use geometry boxplot (hint: `geom_boxplot`)
  5. Add appropriate titles and labels to the plot
  6. Use the `theme_*()` options, choose any

## Solution {{< fa solid check >}}

```{r}
#| echo: true
#| output-location: slide
#| fig-align: center
#| fig-width: 12
#| fig-height: 6

ggplot(data = msleep,
       aes(
         x = vore,
         y = sleep_total
         )
       )+
  geom_boxplot(alpha = 0.5)+
  labs(
    title = "Sleep patters of animals by vore",
    subtitle = "Broadly speaking, animals that eat insects sleep the most",
    x = "Type of food",
    y = "Total hours of sleep in a day",
    caption = "data: V. M. Savage and G. B. West. A quantitative, theoretical framework for understanding mammalian sleep "
  )+
  theme_light()

```

## Exploring Geometries 

. . .

<br>
There are several geometries to choose from.
<br>
<br>

. . .

Which geometry is appropriate for a given plot?
<br>
<br>

. . .

We will discuss a few essential geometries and their use cases

## Situation - One Discrete variable {.scrollable}

[Plot frequencies of conservation status of animals in `msleep` data.]{style="font-size:20px"}

:::{.panel-tabset}

### Data

```{r}
#| echo: false

msleep|>
  relocate(conservation,everything())|>
  knitr::kable()|>
  kableExtra::kable_styling()|>
  kableExtra::scroll_box(width = "95%", height = "400px")
  
```

### Use case - `geom_bar()`

```{r}
#| code-line-numbers: "3|5"
#| echo: true
#| fig-align: center
#| output-location: column-fragment
#| fig-width: 8
#| fig-height: 6

ggplot(
  data = msleep,
  aes(x = conservation)
)+
  geom_bar()+
  theme_bw()

```


:::

## Situation - One Continious variable {.scrollable}

[Plot sleep time of animals in `msleep` data.]{style="font-size:20px"}

:::{.panel-tabset}

### Data

```{r}
#| echo: false

msleep|>
  relocate(bodywt,everything())|>
  knitr::kable()|>
  kableExtra::kable_styling()|>
  kableExtra::scroll_box(width = "95%", height = "400px")
  
```



### Use case - `geom_density()`

```{r}
#| code-line-numbers: "3|5"
#| echo: true
#| fig-align: center
#| output-location: column-fragment
#| fig-width: 8
#| fig-height: 6

ggplot(
  data = msleep,
  aes(x = sleep_total)
)+
  geom_density()+
  theme_bw()

```

### Use case - `geom_histogram()`

```{r}
#| code-line-numbers: "3|5"
#| echo: true
#| fig-align: center
#| output-location: column-fragment
#| fig-width: 8
#| fig-height: 6

ggplot(
  data = msleep,
  aes(x = sleep_total)
)+
  geom_histogram()+
  theme_bw()

```

:::

## Situation - Two Continious variable {.scrollable}

[Plot sleep time of animals and rem sleep time in `msleep` data.]{style="font-size:20px"}

:::{.panel-tabset}

### Data

```{r}
#| echo: false

msleep|>
  relocate(sleep_total,sleep_rem,everything())|>
  knitr::kable()|>
  kableExtra::kable_styling()|>
  kableExtra::scroll_box(width = "95%", height = "400px")
  
```



### Use case - `geom_point()`

```{r}
#| code-line-numbers: "3-4|6"
#| echo: true
#| fig-align: center
#| output-location: column-fragment
#| fig-width: 8
#| fig-height: 6

ggplot(
  data = msleep,
  aes(x = sleep_total,
      y = sleep_rem)
)+
  geom_point()+
  theme_bw()

```

### Use case - `geom_smooth()`

```{r}
#| code-line-numbers: "3-4|6"
#| echo: true
#| fig-align: center
#| output-location: column-fragment
#| fig-width: 8
#| fig-height: 6

ggplot(
  data = msleep,
  aes(x = sleep_total,
      y = sleep_rem)
)+
  geom_smooth()+
  theme_bw()

```

:::

## Situation - 1 Continious, 1 Discrete {.scrollable}

[Plot sleep time of animals and conservation status in `msleep` data.]{style="font-size:20px"}

:::{.panel-tabset}

### Data

```{r}
#| echo: false

msleep|>
  relocate(sleep_total,conservation,everything())|>
  knitr::kable()|>
  kableExtra::kable_styling()|>
  kableExtra::scroll_box(width = "95%", height = "400px")
  
```



### Use case - `geom_col()`

```{r}
#| code-line-numbers: "1-5|7-8|10"
#| echo: true
#| fig-align: center
#| output-location: column-fragment
#| fig-width: 8
#| fig-height: 6


msleep|>
  group_by(conservation)|>
  summarise(
    avg_sleep_time = mean(sleep_total,na.rm = T)
  )|>
  ggplot(
  aes(x = conservation,
      y = avg_sleep_time)
  )+
  geom_col()+
  theme_bw()

```

### Use case - `geom_boxplot()`

```{r}
#| code-line-numbers: "3-4|6"
#| echo: true
#| fig-align: center
#| output-location: column-fragment
#| fig-width: 8
#| fig-height: 6

ggplot(
  data = msleep,
  aes(x = conservation,
      y = sleep_total)
)+
  geom_boxplot()+
  theme_bw()

```

:::
